
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Hathora.Models.BuildV1
{
    using System;
using UnityEngine.Networking;
using Newtonsoft.Json;
using Hathora.Utils;
    using System.Collections.Generic;
    public class RunBuildRequest
    {
        
        [JsonProperty("RequestBody")]
        public RunBuildRequestBody RequestBody { get; set; }
        
        
        [JsonProperty("appId")]
        public string AppId { get; set; }
        
        
        [JsonProperty("buildId")]
        public int BuildId { get; set; }
        
        internal static UnityWebRequest BuildHttpRequestMessage(string operationId, RunBuildRequest value, string baseUrl)
        {
            if("RunBuild" == operationId)
            {
                
                
                var appId = PathParamSerializer.Serialize("simple", false, value.AppId);
                
                var buildId = PathParamSerializer.Serialize("simple", false, value.BuildId);
                // TODO: code review
                
                var name = Utilities.ToString(value.RequestBody.File.Content);
                var bytes = value.RequestBody.File.Content;
                var filename = value.RequestBody.File.File;
                List<IMultipartFormSection> formData = new List<IMultipartFormSection>();
                formData.Add(new MultipartFormFileSection(name, bytes, filename, "application/octet-stream"));var urlString = baseUrl + $"/builds/v1/{appId}/run/{buildId}";// #request-debugging post TODO: work in progress
                UnityWebRequest message;
                message = UnityWebRequest.Post(urlString, formData);
                return message;
            }
            throw new ArgumentException($"Attempt to build UnityWebRequest for invalid operationId [{operationId}] for request type [RunBuildRequest]");
        }
    }
}